Currency Converter | Python@https://github.com/Cpreister109/Final-Project-Currency-Converter@In python I was able to properly utilize an API in order to retrieve exhcnage rates in real time. Then I was able to execute the calculations that would properly convert the designated conversion. All of this is done through a tkinter GUI controlled by the user.
Bank Account Management | Python@https://github.com/Cpreister109/Final-Project-Bank-Account@By using a tkinter GUI I was able to create an application that would ask the user to sign into their bank account. Depending on their input the user would either be prompted to create an account, or asked whether they would like to deposit or withdraw from their account. All of this info would then be saved to a csv file, meaning that the system would have memory of past events between runs.
cadepreister.dev | Python/HTML/CSS@/@This project is actually the website you are currently visiting. I made this site by utilizing the flask extension found in python. By using the different fucntions provided in this extension I was able to build a website with multiple different pages & templates. After the site was constructed I connected the files to a webserver through a domain name that was bought online.
Task List | Python/HTML/CSS (In Unix, Not on Github)@/@When the code in the project is executed it creates a flask app that is able to take in forms from the user using "GET" and "POST" methods. It then takes the due date, date created, and task description. With this information stored in a csv file the tasks are displayed as completed, overdue, or incomplete tasks. The user can then choose to either delete or complete tasks.
Blog Site | Python/HTML/CSS (In Unix, Not on Github)@/@This also utilizes the flask extension. This is a basic webpage with multiple different tabs available to the user. It displays the different blogs uploaded, as well as an about and home page.
URL Shortener | Python/HTML/CSS (In Unix, Not on Github)@/@By using the a route in the routes.py file I was able to connect a random URL to the original webpage URL, and connect that new shortened URL to any website the user wanted. When the URL was sent through the system it was then displayed in a seperate tab of the different short URLs created.
Web Scaper | Python (In Unix, Not on Github)@/@This program was made to scrape through the HTML code on a box office website for the best selling movies the the last month. The system utilizes the extension called beatiful soup in python in order to pull from specific HTML elements. Once these elements are grabbed, the regular expressions module is used to single out the information needed. The info collected is then summarized.
Best Selling Videogame Graph | Python@https://github.com/Cpreister109/cadepreister-sophomore/blob/Sophmore-Year/Best-Selling%20Videogames%20Graph.py@When creating this project I used the "matplotlib.pyplot" extension in python's library in order to take advantage of its graph capabilities. This project was very early on in my time learning python.
Conway's Game of Life | Python@https://github.com/Cpreister109/cadepreister-sophomore/blob/Sophmore-Year/Conway's%20Game%20of%20Life.py@This project was made possible through the extensions "matplotlib.pyplot" and "matplotlib.animation". In this project I used multiple different functions to update the results of each pass through the grid according to the original rules of Conway's Game of Life. I used multiple for loops and countless if/elif statements to execute this.
Tic Tac Toe | Python@https://github.com/Cpreister109/cadepreister-sophomore/blob/Sophmore-Year/Tic%20Tac%20Toe.py@The Tic Tac Toe Project was made within the confines of the turtle module found in python. When using this module it is much easier to track the user input through their mouse rather than typing. So I made a GUI of a Tic Tac Toe board that the user can use to play with a friend.
Wordle | Python@https://github.com/Cpreister109/cadepreister-sophomore/blob/Sophmore-Year/Wordle.py@I was able to create this game by using different index featured in python. By picking from a set word bank I was able to choose a random word at the start of each turn. Then from there it followed the same rules as the popular New York Times Wordle. This is all executed in the shell, I may come back to this in order to make a user interface and a larger word bank.
Television System | Python@https://github.com/Cpreister109/python@This program uses object oriented programming in order to execute the different functions that a TV remote would often have. It is able to turn the TV off and on. This then determines whether or not the user can change the volume or channel. The channel and volume are saved even when the program is off. There is also a mute feature that saves the current volume you are on.